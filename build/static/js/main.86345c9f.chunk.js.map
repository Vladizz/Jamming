{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","Tracklist","class","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","target","defaultValue","playlistTracks","onSave","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86345c9f.chunk.js","sourcesContent":["import React from 'react';\n\n\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n\n  constructor(props) {\n      super(props); \n\n     this.state = {\n         term:''\n     }\n\n\n      this.search = this.search.bind(this);\n      this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n\n\n\n\n\n   search() {\n       this.props.onSearch(this.state.term);\n   }\n\n   handleTermChange(event) {\n       this.setState({term: event.state.value});\n   }\n\n    render () {\n        return (\n            <div className=\"SearchBar\">\n  <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n  <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n</div>\n        )\n    }\n    \n}\n\nexport default SearchBar;","\nimport React from 'react';\n\nimport './Track.css';\n\n\n\n\nclass Track extends React.Component {\n\n   constructor(props) {\n       super(props); \n\n       this.addTrack = this.addTrack.bind(this);\n       this.removeTrack = this.removeTrack.bind(this);\n   }\n\n\nrenderAction() {\n    if (this.props.isRemoval) {\n        return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    } else {\n        return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n    }\n}\n\naddTrack() {\n    this.props.onAdd(this.props.track); \n}\n\nremoveTrack() {\n    this.props.onRemove(this.props.track);\n}\n\n\n\n\n    render () {\n        return(\n            <div className=\"Track\">\n            <div className=\"Track-information\">\n              <h3> {this.props.track.name} </h3>\n              <p> { this.props.track.artist }  |  {this.props.track.album}  </p>\n            </div>\n           {this.renderAction()}\n          </div> \n        )\n    }\n}\n\nexport default Track;","import React from 'react';\n\nimport  './Tracklist.css';\n\nimport Track from '../Track/Track'\n\nclass Tracklist extends React.Component {\n    render() {\n        return (\n            <div class=\"TrackList\">\n     {\n         this.props.tracks.map(track => {\n             return <Track track={track} \n             key={track.id}\n             onAdd={this.props.onAdd}\n             onRemove={this.props.onRemove}\n             isRemoval={this.props.isRemoval}/>\n         })\n     }\n</div>\n        )\n    }\n}\n\nexport default Tracklist;","import React from 'react';\nimport './SearchResults.css';\n\nimport Tracklist from '../Tracklist/Tracklist';\n\nclass SearchResults extends React.Component {\n    render () {\n        return(\n            <div className=\"SearchResults\">\n  <h2>Results</h2>\n  <Tracklist tracks={this.props.searchResults}\n             onAdd= {this.props.onAdd} \n             isRemoval={false}/> \n              \n \n</div>\n        )\n    }\n}\n\nexport default SearchResults;","import React from 'react'; \n\nimport './Playlist.css';\n\n\nimport Tracklist from  '../Tracklist/Tracklist';\n\nclass Playlist extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n  handleNameChange(event) {\n      this.props.onNameChange(event.target.value);\n  }\n\n\nrender() {\n    return (\n        <div class=\"Playlist\">\n        <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\n\n    <Tracklist tracks={this.props.playlistTracks}\n                onRemove={this.props.onRemove} \n                isRemoval={true}/>  \n        \n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    )\n}\n}\n\nexport default Playlist;","const clientId = 'd77e85aaedc44d3aad5c118ada650c0a'; \nconst redirectUri = 'https://Mmuzzik.surge.sh/'; \n\n\nlet accessToken = '';\n\nconst Spotify = {\n  getAccessToken() {\n    if(accessToken) {\n      return accessToken;\n    }\n\n    // check for access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      // This clears the parameters, allowing us to grab a new access token when it expires.\n      window.setTimeout(() => accessToken = '', expiresIn *1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { \n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }))\n    })\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {Authorization: `Bearer ${accessToken}`};\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n        {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({ name: name })\n        }).then(response => response.json()\n        ).then(jsonResponse => {\n          const playlistId = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({ uris: trackUris })\n          });\n        });\n    });\n  }\n}\n\nexport default Spotify;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n\n\nimport Spotify from '../../util/Spotify';\n\n\nclass   App extends React.Component {\n    \n  constructor(props)  {\n    super(props);\n\n   this.state = {\n     searchResults: [],\n    playlistName: 'My playlist',\n    playlistTracks: []\n   };\n\n\n   this.addTrack = this.addTrack.bind(this);\n   this.removeTrack = this.removeTrack.bind(this);\n   this.updatePlaylistName = this.updatePlaylistName.bind(this);\n   this.savePlaylist = this.savePlaylist.bind(this);\n   this.search = this.search.bind(this);\n\n  }\n\naddTrack(track) {\n let tracks = this.state.playlistTracks;\n if (tracks.find(savedTrack => savedTrack.id === track.id)){\n   return;\n }\n\n tracks.push(track);\n this.setState({playlistTracks: tracks}); \n}\n\nremoveTrack(track) {\n  let tracks = this.state.playlistTracks;\n  tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n  this.setState({playlistTracks: tracks});\n}\n\nupdatePlaylistName(name) {\n  this.setState({playlistName: name});\n}\n\nsavePlaylist() {\n  const trackUris = this.state.playlistTracks.map(track => track.uri);\n  Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n    this.setState({\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    });\n  });\n}\n\n\n\n\n\n\n\nsearch(term) {\n  Spotify.search(term).then(searchResults => {\n    this.setState({searchResults:searchResults})\n  })\n}\n\n\n  render () {\n \n    return (\n      <div>\n  <h1>Mu<span className=\"highlight\">zzz</span>ik</h1>\n  <div className=\"App\">\n     <SearchBar onSearch ={this.search}  />  \n    <div className=\"App-playlist\">\n     <SearchResults searchResults={this.state.searchResults}\n                     onAdd = {this.addTrack} /> \n      <Playlist  playlistName={this.state.playlistName}\n                playlistTracks={this.state.playlistTracks}\n                onRemove={this.removeTrack}\n                onNameChange={this.updatePlaylistName}\n                onSave = {this.savePlaylist}/>  \n      </div>\n  </div>\n</div>\n    )\n\n\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}